Item1. 생성자 대신 정적 팩토리 메서드를 고려하라
1. 정적 팩토리 메서드 패턴의 장점
  1) 메서드명을 통해 생성되는 객체를 직관적으로 표현
  2) 인스턴스의 생성을 통제할 수 있음 (싱글톤 패턴 등)
    (1) 생성자를 private 으로 선언한다면, 해당 클래스에서만 생성이 가능
    (2) 해당 클래스에서 생성한 객체를 메서드를 통해 호출하는 방식으로 사용
  3) 구현 클래스를 공개하지 않고도 객체를 반환 가능
  4) 파라미터에 따라 다른 클래스 반환 가능
  5) 서비스로더를 통해 인터페이스 기반의 클래스를 생성하여 유연성을 제공 가능
  
2. Flyweight 패턴
  1) 자주 사용하는 객체를 Factory 에 생성해놓고 가져다 사용하는 패턴
   
3. 인터페이스에 정적 메서드 정의 가능 (Java 8 이후)
  1) 기존에는 인터페이스를 선언 후 클래스 implement 를 통해 구현
  2) 인터페이스에서 default, static 선언을 통해 메서드를 정의할 수 있음
  
4. 서비스 제공자 프레임워크
  1) 서비스 제공자 인터페이스(SPI) 와 서비스 제공자, 서비스 제공자 등록 API, 서비스 접근 API 등으로 구성
  2)
  
5. 리플렉션
  1) 클래스 로더를 통해 읽어들인 클래스 정보를 

6. 인스턴스를 만드는 방법
  1) Class.forName 을 통해 클래스를 호출
  2) Constructor 를 통해 클래스를 생성 (
  3) Constructor.newInstance 를 통해 클래스 선언
  
---------------------------------------------------------------

Item2. 생성자에 매개변수가 많다면 빌더를 고려하라
1. 선택적 매개변수가 많을 때 고려할 수 있는 방안
  1) 점층적 생성자 패턴 또는 생성자 체이닝
  2) 자바빈즈 패턴
    - getter,setter
    - serialize
    - 빈 생성자 구현 등
    
  3) 프리징
    - javascript 에서 사용되며, strict 모드에서 사용 가능
    - Object.freeze('object')
    
  4) 빌더 패턴 (권장)
  
2. 빌더 패턴
  1) 플루언트 API
  2) 메서드 체이닝
  3) lombok.Builder
    - @Builder 어노테이션을 통해 빌더 패턴을 자동으로 구현
    - 모든 파라미터를 받는 생성자가 존재하며, 빌더가 아닌 방법으로 생성 가능
      (@AllArgsConstructor(access = AccessLevel.PRIVATE) 선언을 통해 방지)
    - 필수 파라미터를 알 수 없다는 단점이 존재
  4) 빌더 패턴 상속시 self() 를 이용하여 하위 객체 리턴을 적극 활용할 것
  
  
